apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "jacoco"

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["res/"]
sourceSets.test.java.srcDirs = ["test/"]

if (project.hasProperty('projVersion')) {
        project.version = project.projVersion
    } else {
        project.version = '1.0'
    }


repositories {
    mavenCentral()
    maven {
        url "https://repo.syscy.de/repository/maven-public/"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        url "https://maven.enginehub.org/repo/"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor "org.projectlombok:lombok:1.18.20"

    implementation "it.unimi.dsi:fastutil:8.5.4"
    implementation "com.sk89q.worldedit:worldedit-bukkit:7.2.6"
    implementation "com.comphenix.protocol:ProtocolLib:4.7.0"
    implementation "net.pl3x:purpur-server:1.16.5-SNAPSHOT"

    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

javadoc {
    failOnError = false
}

test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.required = false
            csv.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    jacoco {
        toolVersion = "0.8.7"
    }


subprojects {
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    }

    jacocoTestReport {

        getAdditionalSourceDirs().setFrom(files(sourceSets.main.allSource.srcDirs))
        getSourceDirectories().setFrom(files(sourceSets.main.allSource.srcDirs))
        getClassDirectories().setFrom(files(sourceSets.main.output))
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled true
        }
    }
}
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true

        csv.enabled true
    }
}
